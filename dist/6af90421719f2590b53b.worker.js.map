{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/layout/utils.js","webpack:///./src/layout/spectral2.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","create2dArray","rows","columns","concat","_toConsumableArray","Array","keys","map","fill","degrees","nodes","edges","length","forEach","e","source","index","target","ordered_nodes","el","sort","a","b","ordered_degrees","getDepth","obj","depth","children","depth_visited","Error","tmpDepth","getRanges","Math","abs","start","step","_utils__WEBPACK_IMPORTED_MODULE_0__","dot","normalize","arr","coordinates","pow","sqrt","euclideanDistance","narr","rand","random","zeros","normalize2","x","maxx","max","apply","minx","min","self","addEventListener","data","[object Object]","this","_nodes","_edges","_epsilon","_MAX_ITTERATIONS","_num_elements","_dims","A","ii","j","D","graph","node_degree","deg","dims","u","ones","k","uhk","itt_count","stop","uk","slice","ul","top_","bottom","vmi","ratio","vsi","y","node","layout_options","postMessage"],"mappings":"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","file":"6af90421719f2590b53b.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n *  Copyright (c) 2017, Helikar Lab.\n *  All rights reserved.\n *\n *  This source code is licensed under the GPLv3 License.\n *  Author: Renato Fabbri\n */\n\nexport function create2dArray (rows, columns) {\n    return [...Array(rows).keys()].map(i => Array(columns).fill(0));\n}\n\nexport function degrees(nodes, edges) {\n  // should return ordered nodes and their degrees - high to low\n  let degrees = Array(nodes.length).fill(0);\n  edges.forEach(function(e) {\n      degrees[e.source.index] += 1;\n      degrees[e.target.index] += 1;\n  }); // check to see if not getting double of the degree in undirected graphs\n  //getting the order of nodes from highest to lowest degrees\n  let ordered_nodes = degrees.map(function(el, i) {\n      return { index: i, value: el };\n  });\n  ordered_nodes.sort(function(a, b) {\n      return +(a.value < b.value) || +(a.value === b.value) - 1;\n  });\n  let ordered_degrees = ordered_nodes.map(function(el){\n      return degrees[el.index];\n  });\n  return { nodes: ordered_nodes,\n           degrees: ordered_degrees } ;\n}\n\nexport function getDepth(obj) {\n    let depth = 0;\n    if (obj.children) {\n        obj.children.forEach(function (d) {\n\t    if (d.depth_visited == true){\n\t\t    throw new Error(\"This layout is only for trees acyclic graphs\");\n\t    }\n\t    d.depth_visited = true;\n            let tmpDepth = getDepth(d);\n            if (tmpDepth > depth) {\n                depth = tmpDepth;\n            }\n        })\n    }\n    return 1 + depth;\n}\n\nexport function getRanges(n) {\n  n = Math.abs(n);\n  if(n <= 1){\n      return {\n        start: 0.5,\n        step: 1\n      };\n  }\n  let start = .05;\n  return {\n      start,\n      step: (1-2*start)/(n-1)\n  }\n}\n\n","/**\n *  Copyright (c) 2017, Helikar Lab.\n *  All rights reserved.\n *\n *  This source code is licensed under the GPLv3 License.\n *  Author: Renato Fabbri\n */\n\n// inspired in Matlab implementation\n// and JS transcription in\n// https://github.com/alanmeeson/spectral-graph-layout\n\nimport {create2dArray} from './utils';\n\nclass Spectral2 {\n  constructor(nodes, edges) {\n    this._nodes = nodes;\n    this._edges = edges;\n    this._epsilon = 1e-8; // tolerance\n    this._MAX_ITTERATIONS = 100; //We use power iteration, this is analogous to wall time to avoid infinite loops.\n    this._num_elements = nodes.length; //number of nodes in graph\n    this._dims = 2;\n  }\n  apply () {\n      let A = create2dArray(this._nodes.length, this._nodes.length);\n      // build the adjacency matrix\n      for (let i=0; i<this._edges.length; ++i){\n          let ii = this._edges[i].source.index;\n          let j = this._edges[i].target.index;\n          A[ii][j] = 1; // not considering edge weight for now (the example json files don't have weight)\n      }\n      const D = deg(A); //degree of each node in graph (number of connections).\n\n      const dims = this._dims + 1; //add one to the dims to allow for the first eigen vector\n      let u = new Array(dims);//declare the eigen vector matrix\n      u[0] = normalize(ones(this._num_elements)); //create & normalize the first eigen vector\n      for (let i = 1; i < dims; i++) u[i] = zeros(this._num_elements); //create empty space for the other eigen vectors\n\n      //Power iteration to determine the remaining eigen vectors.\n      for (let k=1; k < dims; k++) { //for each eigen vector after the first, \n          //initialize eigen vector with random values\n          let uhk = normalize(rand(this._num_elements));\n\n          let itt_count = 0; //we are allowing a max of 100 iterations, to avoid hanging and infinite loops. (specified above in constants)\n          let stop = false; //stopping criterion flag.\n          while (!stop) { // do...while using flags to keep it consistent with my matlab implementation\n\n              //D-orthogonalize against previous eigenvectors\n              let uk = uhk.slice();\n              for (let l = 0; l < k; l++) {\t\t\t\t\t\t\n                  let ul = u[l]; //extract the l-th eigen vector\n\n                  //Calculate (uk'.D.ul)/(ul'.D.ul)\n                  let top_ = 0;\n                  let bottom = 0;\n                  for (let vmi = 0; vmi < uk.length; vmi++) {\n                      top_ += (uk[vmi] * D[vmi] * ul[vmi]);\n                      bottom += (ul[vmi] * D[vmi] * ul[vmi]);\n                  }\n                  const ratio = top_ / bottom;\n\n                  //uk = uk - ((uk' . D . ul) / (ul' . D ul)) . ul\n                  for (let vsi = 0; vsi < uk.length; vsi++) {\n                      uk[vsi] = uk[vsi] - (ratio * ul[vsi]);\n                  }\n              }\n\n              //multiply with .5(I+D^-1 A)\n              for (let i = 0; i < uhk.length; i++) {\n                  uhk[i] = 0.5 * (uk[i] + dot(A[i], uk) / D[i]);\n              }\n\n\n              uhk = normalize(uhk);\n\n              itt_count = itt_count + 1;\n              stop = (itt_count > 100) | !(dot(uhk, uk) < (1-this._epsilon));\n          }\n          u[k] = uhk.slice();\t\n      }\n\n      //discard the first eigenvector which should be [ones].\n      // var v = new Array(u.length);\n      // for (var i=0; i < u.length; i++) {\n      //     v[i] = new Array(u[i].length);\n      //     for (var j=0; j < u[i].length; j++) v[i][j] = u[i][j];\n      // }\n      const x = normalize2(u[1]);\n      const y = normalize2(u[2]);\n      this._nodes.forEach(function(node, i){\n          node.x = x[i];\n          node.y = y[i];\n      }); \n  }\n};\n\nfunction deg(graph) {\n    //Calculate the degree of each node from the graph matrix.\n    let d = zeros(graph.length);\n\n    //degree of node i is the sum of the weights of all edges connected to it.\n    for (let i = 0; i < graph.length; i++) {\n        let node_degree = 0;\n        for (let j = 0; j < graph[i].length; j++) {\n            node_degree += graph[i][j];\n        }\n        d[i] = node_degree+1;\n    }\n\n    return d;\n}\n\nfunction dot(a,b) {\n    //inner product of two vectors\n    let d = 0;\n    for (let i = 0; i < a.length; i++) {\n        d += a[i] * b[i];\n    }\n    return d;\n}\n\nfunction euclideanDistance(coordinates) {\n    //calculate the euclidean distance between two points/vectors.\n    // used for normalization.\n    let d = 0;\n\n    for (let i = 0; i < coordinates.length; i++) {\n        d += Math.pow(coordinates[i], 2);\n    }\n    return Math.sqrt(d);\n}\n\nfunction normalize(arr) {\n    //normalizes a vector = arr/||arr||\n    const d = euclideanDistance(arr);\n    let narr = new Array(arr.length);\n    for (let i = 0; i < arr.length; i++) {\n        narr[i] = arr[i] / d;\n    }\n\n    return narr;\n}\n\nfunction rand(n) {\n    //create a vector of length n and fill with random numbers.\n    let arr = new Array(n);\n    for (let i = 0; i < n; i++) arr[i] = Math.random();\n    return arr;\n}\n\nfunction add(a, b) {\n    let c = new Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        c[i] = new Array(a[i].length);\n        for (let j = 0; j < a[i].length; j++) c[i][j] = a[i][j] + b[i][j];\n    }\n    return c;\n}\n\nfunction symmetricRandMatrix(n, ulim) {\n    let mat = new Array(n);\n    for (let i = 0; i < n; i++) {\n        mat[i] = new Array(n);\n        mat[i][i] = 0;\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            mat[i][j] = ulim * Math.random();\n            mat[j][i] = mat[i][j];\n        }\n    }\n    return mat;\n}\n\nfunction zeros(n) {\n    //create a vector filled with zeros\n    let arr = new Array(n);\n    for (let i = 0; i < n; i++) arr[i] = 0;\n    return arr;\n}\n\nfunction ones(n) {\n    //create a vector filled with ones\n    let arr = new Array(n);\n    for (let i = 0; i < n; i++) arr[i] = 1;\n    return arr;\n}\n\nfunction normalize2 (x) {\n    let maxx = Math.max.apply(null, x.map(Math.abs));\n    let minx = Math.min.apply(null, x);\n    for(let i=0; i<x.length; ++i){\n        x[i] = 0.1+(x[i]-minx)/((maxx - minx)*1.25);\n    }\n    return x;\n}\n\nself.addEventListener('message', function (e) {\n    var nodes = e.data.nodes;\n    var edges = e.data.edges;\n    var layout_options = e.data.layout_options;\n    new Spectral2(nodes, edges, layout_options).apply();\n    self.postMessage({ nodes, edges });\n}, false);"],"sourceRoot":""}