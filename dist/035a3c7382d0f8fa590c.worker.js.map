{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/layout/utils.js","webpack:///./node_modules/ml-array-max/src/index.js","webpack:///./node_modules/ml-array-rescale/src/index.js","webpack:///./node_modules/ml-array-min/src/index.js","webpack:///./node_modules/ml-matrix/src/dc/lu.js","webpack:///./node_modules/ml-matrix/src/dc/util.js","webpack:///./node_modules/ml-matrix/src/dc/svd.js","webpack:///./node_modules/ml-matrix/src/util.js","webpack:///./node_modules/ml-matrix/src/views/base.js","webpack:///./node_modules/ml-matrix/src/views/transpose.js","webpack:///./node_modules/ml-matrix/src/views/row.js","webpack:///./node_modules/ml-matrix/src/views/sub.js","webpack:///./node_modules/ml-matrix/src/views/selection.js","webpack:///./node_modules/ml-matrix/src/views/rowSelection.js","webpack:///./node_modules/ml-matrix/src/views/columnSelection.js","webpack:///./node_modules/ml-matrix/src/views/column.js","webpack:///./node_modules/ml-matrix/src/views/flipRow.js","webpack:///./node_modules/ml-matrix/src/views/flipColumn.js","webpack:///./node_modules/ml-matrix/src/abstractMatrix.js","webpack:///./node_modules/ml-matrix/src/matrix.js","webpack:///./node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","webpack:///./node_modules/ml-matrix/src/dc/evd.js","webpack:///./src/layout/spectral.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","create2dArray","rows","columns","concat","_toConsumableArray","Array","keys","map","fill","degrees","nodes","edges","length","forEach","e","source","index","target","ordered_nodes","el","sort","a","b","ordered_degrees","getDepth","obj","depth","children","depth_visited","Error","tmpDepth","getRanges","Math","abs","start","step","src_max","input","isArray","max","rescale","options","TypeError","output","undefined","currentMin","min","src_min","currentMax","RangeError","minValue","autoMinMax","maxValue","factor","lu_LuDecomposition","[object Object]","matrix","j","k","v","LUcolj","kmax","lu","WrapperMatrix2D_WrapperMatrix2D","checkMatrix","clone","pivotVector","pivotSign","set","this","LU","data","col","matrix_Matrix","isSingular","count","X","subMatrixRow","determinant","isSquare","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","slice","hypotenuse","sqrt","getFilled2DArray","array","svd_SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","transpose","aux","console","warn","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","Number","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","scale","sp","spm1","epm1","sk","ek","shift","g","tmp","Y","threshold","scols","Ls","zeros","rightSingularVectors","VL","mmul","vrows","urows","VLU","sum","solve","diag","vcols","ucols","condition","norm2","rank","tol","ii","diagonal","leftSingularVectors","isMatrix","diagonalMatrix","checkRowIndex","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","some","from","checkRange","startRow","endRow","startColumn","endColumn","arguments","checkNumber","base_BaseView","AbstractMatrix","super","static","species","transpose_MatrixTransposeView","rowIndex","columnIndex","row_MatrixRowView","sub_MatrixSubView","selection_MatrixSelectionView","indices","rowSelection_MatrixRowSelectionView","columnSelection_MatrixColumnSelectionView","column_MatrixColumnView","flipRow_MatrixFlipRowView","flipColumn_MatrixFlipColumnView","superCtor","Matrix","newRows","newColumns","newData","newMatrix","empty","rng","random","floor","matrix1","matrix2","result","klass","size","callback","jj","copy","rowRep","colRep","constructor","setSubMatrix","mulS","rowVector","getRow","row1","row2","temp","columnVector","getColumn","column1","column2","idx","by","sumByRow","sumByColumn","sumAll","prod","type","vector2","vector1","dot","other","Bcolj","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","y","x","r1","c1","r2","c2","embed","mat","cols","resultat","blockMult","halfRows","parseInt","halfCols","subMatrix","add","sub","scaled","setRow","setColumn","q","compareFunction","compareNumbers","trace","subMatrix0","subMatrix1","subMatrix2","selectionView","det","svdSolution","transposeView","rand","identity","eye","negate","neg","tensorProduct","kroneckerProduct","staticMethodWithArgs","eval2","eval","operator","inplaceOp","fillTemplateFunction","op","inplaceOpS","inplaceOpM","staticOp","methods","method","mathMethod","push","inplaceMeth","staticMeth","methodWithArg","args","inplaceMethWithArgs","staticMethWithArgs","tmplVar","inplaceMethod2","inplaceMethodS","inplaceMethodM","staticMethod2","template","values","replace","RegExp","nRows","nColumns","isInteger","splice","evd_EigenvalueDecomposition","assumeSymmetric","isSymmetric","h","hh","tred2","dl1","c3","el1","s2","tst1","tql2","H","ort","high","low","orthes","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","norm","z","iter","cdiv","hqr2","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","xr","xi","yr","yi","self","addEventListener","_nodes","_edges","A","utils","reduce","foo","iii","arr","apply","indexOf","Infinity","second_min","second_mini","third_min","twoSmallest","foo_","xy","maxx","maxy","minx","miny","normalize","node","layout_options","postMessage"],"mappings":"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","file":"035a3c7382d0f8fa590c.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n *  Copyright (c) 2017, Helikar Lab.\n *  All rights reserved.\n *\n *  This source code is licensed under the GPLv3 License.\n *  Author: Renato Fabbri\n */\n\nexport function create2dArray (rows, columns) {\n    return [...Array(rows).keys()].map(i => Array(columns).fill(0));\n}\n\nexport function degrees(nodes, edges) {\n  // should return ordered nodes and their degrees - high to low\n  let degrees = Array(nodes.length).fill(0);\n  edges.forEach(function(e) {\n      degrees[e.source.index] += 1;\n      degrees[e.target.index] += 1;\n  }); // check to see if not getting double of the degree in undirected graphs\n  //getting the order of nodes from highest to lowest degrees\n  let ordered_nodes = degrees.map(function(el, i) {\n      return { index: i, value: el };\n  });\n  ordered_nodes.sort(function(a, b) {\n      return +(a.value < b.value) || +(a.value === b.value) - 1;\n  });\n  let ordered_degrees = ordered_nodes.map(function(el){\n      return degrees[el.index];\n  });\n  return { nodes: ordered_nodes,\n           degrees: ordered_degrees } ;\n}\n\nexport function getDepth(obj) {\n    let depth = 0;\n    if (obj.children) {\n        obj.children.forEach(function (d) {\n\t    if (d.depth_visited == true){\n\t\t    throw new Error(\"This layout is only for trees acyclic graphs\");\n\t    }\n\t    d.depth_visited = true;\n            let tmpDepth = getDepth(d);\n            if (tmpDepth > depth) {\n                depth = tmpDepth;\n            }\n        })\n    }\n    return 1 + depth;\n}\n\nexport function getRanges(n) {\n  n = Math.abs(n);\n  if(n <= 1){\n      return {\n        start: 0.5,\n        step: 1\n      };\n  }\n  let start = .05;\n  return {\n      start,\n      step: (1-2*start)/(n-1)\n  }\n}\n\n","/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\nexport default function max(input) {\n    if (!Array.isArray(input)) {\n        throw new Error('input must be an array');\n    }\n\n    if (input.length === 0) {\n        throw new Error('input must not be empty');\n    }\n\n    var max = input[0];\n    for (var i = 1; i < input.length; i++) {\n        if (input[i] > max) max = input[i];\n    }\n    return max;\n}\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nexport default function rescale(input, options = {}) {\n    if (!Array.isArray(input)) {\n        throw new TypeError('input must be an array');\n    } else if (input.length === 0) {\n        throw new TypeError('input must not be empty');\n    }\n\n    let output;\n    if (options.output !== undefined) {\n        if (!Array.isArray(options.output)) {\n            throw new TypeError('output option must be an array if specified');\n        }\n        output = options.output;\n    } else {\n        output = new Array(input.length);\n    }\n\n    const currentMin = min(input);\n    const currentMax = max(input);\n\n    if (currentMin === currentMax) {\n        throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n    }\n\n    const {\n        min: minValue = options.autoMinMax ? currentMin : 0,\n        max: maxValue = options.autoMinMax ? currentMax : 1\n    } = options;\n\n    if (minValue >= maxValue) {\n        throw new RangeError('min option must be smaller than max option');\n    }\n\n    const factor = (maxValue - minValue) / (currentMax - currentMin);\n    for (var i = 0; i < input.length; i++) {\n        output[i] = (input[i] - currentMin) * factor + minValue;\n    }\n\n    return output;\n}\n","/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\nexport default function min(input) {\n    if (!Array.isArray(input)) {\n        throw new Error('input must be an array');\n    }\n\n    if (input.length === 0) {\n        throw new Error('input must not be empty');\n    }\n\n    var min = input[0];\n    for (var i = 1; i < input.length; i++) {\n        if (input[i] < min) min = input[i];\n    }\n    return min;\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\n/**\n * @class LuDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n * @param {Matrix} matrix\n */\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    var lu = matrix.clone();\n    var rows = lu.rows;\n    var columns = lu.columns;\n    var pivotVector = new Array(rows);\n    var pivotSign = 1;\n    var i, j, k, p, s, t, v;\n    var LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  /**\n   *\n   * @return {boolean}\n   */\n  isSingular() {\n    var data = this.LU;\n    var col = data.columns;\n    for (var j = 0; j < col; j++) {\n      if (data[j][j] === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {Matrix} value\n   * @return {Matrix}\n   */\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    var lu = this.LU;\n    var rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    var count = value.columns;\n    var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    var columns = lu.columns;\n    var i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X[i][j] -= X[k][j] * lu[i][k];\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X[k][j] /= lu[k][k];\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X[i][j] -= X[k][j] * lu[i][k];\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get determinant() {\n    var data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    var determinant = this.pivotSign;\n    var col = data.columns;\n    for (var j = 0; j < col; j++) {\n      determinant *= data[j][j];\n    }\n    return determinant;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get lowerTriangularMatrix() {\n    var data = this.LU;\n    var rows = data.rows;\n    var columns = data.columns;\n    var X = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        if (i > j) {\n          X[i][j] = data[i][j];\n        } else if (i === j) {\n          X[i][j] = 1;\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get upperTriangularMatrix() {\n    var data = this.LU;\n    var rows = data.rows;\n    var columns = data.columns;\n    var X = new Matrix(rows, columns);\n    for (var i = 0; i < rows; i++) {\n      for (var j = 0; j < columns; j++) {\n        if (i <= j) {\n          X[i][j] = data[i][j];\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n    return X;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get pivotPermutationVector() {\n    return this.pivotVector.slice();\n  }\n}\n","export function hypotenuse(a, b) {\n  var r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nexport function getFilled2DArray(rows, columns, value) {\n  var array = new Array(rows);\n  for (var i = 0; i < rows; i++) {\n    array[i] = new Array(columns);\n    for (var j = 0; j < columns; j++) {\n      array[i][j] = value;\n    }\n  }\n  return array;\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\nimport { hypotenuse, getFilled2DArray } from './util';\n\n/**\n * @class SingularValueDecomposition\n * @see https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n * @param {Matrix} value\n * @param {object} [options]\n * @param {boolean} [options.computeLeftSingularVectors=true]\n * @param {boolean} [options.computeRightSingularVectors=true]\n * @param {boolean} [options.autoTranspose=false]\n */\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    var m = value.rows;\n    var n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false\n    } = options;\n\n    var wantu = Boolean(computeLeftSingularVectors);\n    var wantv = Boolean(computeRightSingularVectors);\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose'\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        var aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    var nu = Math.min(m, n);\n    var ni = Math.min(m + 1, n);\n    var s = new Array(ni);\n    var U = getFilled2DArray(m, nu, 0);\n    var V = getFilled2DArray(n, n, 0);\n\n    var e = new Array(n);\n    var work = new Array(m);\n\n    var si = new Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n    var mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a[i][k]);\n        }\n        if (s[k] !== 0) {\n          if (a[k][k] < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a[i][k] /= s[k];\n          }\n          a[k][k] += 1;\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a[i][k] * a[i][j];\n          }\n          t = -t / a[k][k];\n          for (let i = k; i < m; i++) {\n            a[i][j] += t * a[i][k];\n          }\n        }\n        e[j] = a[k][j];\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U[i][k] = a[i][k];\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a[i][j];\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a[i][j] += t * work[i];\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V[i][k] = e[i];\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U[i][j] = 0;\n        }\n        U[j][j] = 1;\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U[i][k] * U[i][j];\n            }\n            t = -t / U[k][k];\n            for (let i = k; i < m; i++) {\n              U[i][j] += t * U[i][k];\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U[i][k] = -U[i][k];\n          }\n          U[k][k] = 1 + U[k][k];\n          for (let i = 0; i < k - 1; i++) {\n            U[i][k] = 0;\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U[i][k] = 0;\n          }\n          U[k][k] = 1;\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V[i][k] * V[i][j];\n            }\n            t = -t / V[k + 1][k];\n            for (let i = k + 1; i < n; i++) {\n              V[i][j] += t * V[i][k];\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V[i][k] = 0;\n        }\n        V[k][k] = 1;\n      }\n    }\n\n    var pp = p - 1;\n    var iter = 0;\n    var eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V[i][j] + sn * V[i][p - 1];\n                V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                V[i][j] = t;\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U[i][j] + sn * U[i][k - 1];\n                U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                U[i][j] = t;\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k])\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V[i][j] + sn * V[i][j + 1];\n                V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                V[i][j] = t;\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U[i][j] + sn * U[i][j + 1];\n                U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                U[i][j] = t;\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V[i][k] = -V[i][k];\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V[i][k + 1];\n                V[i][k + 1] = V[i][k];\n                V[i][k] = t;\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U[i][k + 1];\n                U[i][k + 1] = U[i][k];\n                U[i][k] = t;\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      var tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  /**\n   * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).\n   * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :\n   * var svd = SingularValueDecomposition(A);\n   * var x = svd.solve(b);\n   * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)\n   * @return {Matrix} - The vector x\n   */\n  solve(value) {\n    var Y = value;\n    var e = this.threshold;\n    var scols = this.s.length;\n    var Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls[i][i] = 0;\n      } else {\n        Ls[i][i] = 1 / this.s[i];\n      }\n    }\n\n    var U = this.U;\n    var V = this.rightSingularVectors;\n\n    var VL = V.mmul(Ls);\n    var vrows = V.rows;\n    var urows = U.length;\n    var VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL[i][k] * U[j][k];\n        }\n        VLU[i][j] = sum;\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  /**\n   *\n   * @param {Array<number>} value\n   * @return {Matrix}\n   */\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  /**\n   * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :\n   * var svd = SingularValueDecomposition(A);\n   * var inverseA = svd.inverse();\n   * @return {Matrix} - The approximation of the inverse of the matrix\n   */\n  inverse() {\n    var V = this.V;\n    var e = this.threshold;\n    var vrows = V.length;\n    var vcols = V[0].length;\n    var X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X[i][j] = V[i][j] / this.s[j];\n        } else {\n          X[i][j] = 0;\n        }\n      }\n    }\n\n    var U = this.U;\n\n    var urows = U.length;\n    var ucols = U[0].length;\n    var Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X[i][k] * U[j][k];\n        }\n        Y[i][j] = sum;\n      }\n    }\n\n    return Y;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get norm2() {\n    return this.s[0];\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get rank() {\n    var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    var r = 0;\n    var s = this.s;\n    for (var i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get diagonal() {\n    return this.s;\n  }\n\n  /**\n   *\n   * @return {number}\n   */\n  get threshold() {\n    return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get leftSingularVectors() {\n    if (!Matrix.isMatrix(this.U)) {\n      this.U = new Matrix(this.U);\n    }\n    return this.U;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get rightSingularVectors() {\n    if (!Matrix.isMatrix(this.V)) {\n      this.V = new Matrix(this.V);\n    }\n    return this.V;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import Matrix from './matrix';\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  var max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  var max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns'\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices)\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  var rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  var columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function getRange(from, to) {\n  var arr = new Array(to - from + 1);\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = from + i;\n  }\n  return arr;\n}\n\nexport function sumByRow(matrix) {\n  var sum = Matrix.zeros(matrix.rows, 1);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  var sum = Matrix.zeros(1, matrix.columns);\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  var v = 0;\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class BaseView extends AbstractMatrix() {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n\n  static get [Symbol.species]() {\n    return Matrix;\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n","import { checkRange } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex\n    );\n  }\n}\n","import { checkIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    var indices = checkIndices(matrix, rowIndices, columnIndices);\n    super(matrix, indices.row.length, indices.column.length);\n    this.rowIndices = indices.row;\n    this.columnIndices = indices.column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex]\n    );\n  }\n}\n","import { checkRowIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    rowIndices = checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n","import { checkColumnIndices } from '../util';\n\nimport BaseView from './base';\n\nexport default class MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    columnIndices = checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n","import BaseView from './base';\n\nexport default class MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n","import rescale from 'ml-array-rescale';\n\nimport LuDecomposition from './dc/lu';\nimport SvDecomposition from './dc/svd';\nimport {\n  checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector,\n  checkRange, checkIndices,\n  sumByRow, sumByColumn, sumAll\n} from './util';\nimport MatrixTransposeView from './views/transpose';\nimport MatrixRowView from './views/row';\nimport MatrixSubView from './views/sub';\nimport MatrixSelectionView from './views/selection';\nimport MatrixRowSelectionView from './views/rowSelection';\nimport MatrixColumnSelectionView from './views/columnSelection';\nimport MatrixColumnView from './views/column';\nimport MatrixFlipRowView from './views/flipRow';\nimport MatrixFlipColumnView from './views/flipColumn';\n\nexport default function AbstractMatrix(superCtor) {\n  if (superCtor === undefined) superCtor = Object;\n\n  /**\n   * Real matrix\n   * @class Matrix\n   * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n   * 2D array containing the data or Matrix instance to clone\n   * @param {number} [nColumns] - Number of columns of the new matrix\n   */\n  class Matrix extends superCtor {\n    static get [Symbol.species]() {\n      return this;\n    }\n\n    /**\n     * Constructs a Matrix with the chosen dimensions from a 1D array\n     * @param {number} newRows - Number of rows\n     * @param {number} newColumns - Number of columns\n     * @param {Array} newData - A 1D array containing data for the matrix\n     * @return {Matrix} - The new matrix\n     */\n    static from1DArray(newRows, newColumns, newData) {\n      var length = newRows * newColumns;\n      if (length !== newData.length) {\n        throw new RangeError('Data length does not match given dimensions');\n      }\n      var newMatrix = new this(newRows, newColumns);\n      for (var row = 0; row < newRows; row++) {\n        for (var column = 0; column < newColumns; column++) {\n          newMatrix.set(row, column, newData[row * newColumns + column]);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n    static rowVector(newData) {\n      var vector = new this(1, newData.length);\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(0, i, newData[i]);\n      }\n      return vector;\n    }\n\n    /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n    static columnVector(newData) {\n      var vector = new this(newData.length, 1);\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(i, 0, newData[i]);\n      }\n      return vector;\n    }\n\n    /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static empty(rows, columns) {\n      return new this(rows, columns);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static zeros(rows, columns) {\n      return this.empty(rows, columns).fill(0);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n    static ones(rows, columns) {\n      return this.empty(rows, columns).fill(1);\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n    static rand(rows, columns, rng) {\n      if (rng === undefined) rng = Math.random;\n      var matrix = this.empty(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          matrix.set(i, j, rng());\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n    static randInt(rows, columns, maxValue, rng) {\n      if (maxValue === undefined) maxValue = 1000;\n      if (rng === undefined) rng = Math.random;\n      var matrix = this.empty(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = Math.floor(rng() * maxValue);\n          matrix.set(i, j, value);\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n    static eye(rows, columns, value) {\n      if (columns === undefined) columns = rows;\n      if (value === undefined) value = 1;\n      var min = Math.min(rows, columns);\n      var matrix = this.zeros(rows, columns);\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, value);\n      }\n      return matrix;\n    }\n\n    /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n    static diag(data, rows, columns) {\n      var l = data.length;\n      if (rows === undefined) rows = l;\n      if (columns === undefined) columns = rows;\n      var min = Math.min(l, rows, columns);\n      var matrix = this.zeros(rows, columns);\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, data[i]);\n      }\n      return matrix;\n    }\n\n    /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n    static min(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new this(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n    static max(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new this(rows, columns);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n    static checkMatrix(value) {\n      return Matrix.isMatrix(value) ? value : new this(value);\n    }\n\n    /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n    static isMatrix(value) {\n      return (value != null) && (value.klass === 'Matrix');\n    }\n\n    /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n    get size() {\n      return this.rows * this.columns;\n    }\n\n    /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n    apply(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('callback must be a function');\n      }\n      var ii = this.rows;\n      var jj = this.columns;\n      for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n          callback.call(this, i, j);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n    to1DArray() {\n      var array = new Array(this.size);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          array[i * this.columns + j] = this.get(i, j);\n        }\n      }\n      return array;\n    }\n\n    /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n    to2DArray() {\n      var copy = new Array(this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        copy[i] = new Array(this.columns);\n        for (var j = 0; j < this.columns; j++) {\n          copy[i][j] = this.get(i, j);\n        }\n      }\n      return copy;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one row\n         */\n    isRowVector() {\n      return this.rows === 1;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one column\n         */\n    isColumnVector() {\n      return this.columns === 1;\n    }\n\n    /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n    isVector() {\n      return (this.rows === 1) || (this.columns === 1);\n    }\n\n    /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n    isSquare() {\n      return this.rows === this.columns;\n    }\n\n    /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n    isSymmetric() {\n      if (this.isSquare()) {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j <= i; j++) {\n            if (this.get(i, j) !== this.get(j, i)) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n    set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n      throw new Error('set method is unimplemented');\n    }\n\n    /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n    get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n      throw new Error('get method is unimplemented');\n    }\n\n    /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n    repeat(rowRep, colRep) {\n      rowRep = rowRep || 1;\n      colRep = colRep || 1;\n      var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n      for (var i = 0; i < rowRep; i++) {\n        for (var j = 0; j < colRep; j++) {\n          matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n        }\n      }\n      return matrix;\n    }\n\n    /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n    fill(value) {\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, value);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n    neg() {\n      return this.mulS(-1);\n    }\n\n    /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n    getRow(index) {\n      checkRowIndex(this, index);\n      var row = new Array(this.columns);\n      for (var i = 0; i < this.columns; i++) {\n        row[i] = this.get(index, i);\n      }\n      return row;\n    }\n\n    /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n    getRowVector(index) {\n      return this.constructor.rowVector(this.getRow(index));\n    }\n\n    /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n    setRow(index, array) {\n      checkRowIndex(this, index);\n      array = checkRowVector(this, array);\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, array[i]);\n      }\n      return this;\n    }\n\n    /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n    swapRows(row1, row2) {\n      checkRowIndex(this, row1);\n      checkRowIndex(this, row2);\n      for (var i = 0; i < this.columns; i++) {\n        var temp = this.get(row1, i);\n        this.set(row1, i, this.get(row2, i));\n        this.set(row2, i, temp);\n      }\n      return this;\n    }\n\n    /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n    getColumn(index) {\n      checkColumnIndex(this, index);\n      var column = new Array(this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        column[i] = this.get(i, index);\n      }\n      return column;\n    }\n\n    /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n    getColumnVector(index) {\n      return this.constructor.columnVector(this.getColumn(index));\n    }\n\n    /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n    setColumn(index, array) {\n      checkColumnIndex(this, index);\n      array = checkColumnVector(this, array);\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, array[i]);\n      }\n      return this;\n    }\n\n    /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n    swapColumns(column1, column2) {\n      checkColumnIndex(this, column1);\n      checkColumnIndex(this, column2);\n      for (var i = 0; i < this.rows; i++) {\n        var temp = this.get(i, column1);\n        this.set(i, column1, this.get(i, column2));\n        this.set(i, column2, temp);\n      }\n      return this;\n    }\n\n    /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    addRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    subRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    mulRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    divRowVector(vector) {\n      vector = checkRowVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[j]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    addColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    subColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    mulColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n    divColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[i]);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n    mulRow(index, value) {\n      checkRowIndex(this, index);\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, this.get(index, i) * value);\n      }\n      return this;\n    }\n\n    /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n    mulColumn(index, value) {\n      checkColumnIndex(this, index);\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, this.get(i, index) * value);\n      }\n      return this;\n    }\n\n    /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n    max() {\n      var v = this.get(0, 0);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n          }\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n    maxIndex() {\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n    min() {\n      var v = this.get(0, 0);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n          }\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n    minIndex() {\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n    maxRow(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n    maxRowIndex(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n    minRow(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n    minRowIndex(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n    maxColumn(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n    maxColumnIndex(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      var idx = [0, column];\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n    minColumn(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n        }\n      }\n      return v;\n    }\n\n    /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n    minColumnIndex(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      var idx = [0, column];\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n      return idx;\n    }\n\n    /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n    diag() {\n      var min = Math.min(this.rows, this.columns);\n      var diag = new Array(min);\n      for (var i = 0; i < min; i++) {\n        diag[i] = this.get(i, i);\n      }\n      return diag;\n    }\n\n    /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n    sum(by) {\n      switch (by) {\n        case 'row':\n          return sumByRow(this);\n        case 'column':\n          return sumByColumn(this);\n        default:\n          return sumAll(this);\n      }\n    }\n\n    /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n    mean() {\n      return this.sum() / this.size;\n    }\n\n    /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n    prod() {\n      var prod = 1;\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          prod *= this.get(i, j);\n        }\n      }\n      return prod;\n    }\n\n    /**\n         * Returns the norm of a matrix.\n         * @param {string} type - \"frobenius\" (default) or \"max\" return resp. the Frobenius norm and the max norm.\n         * @return {number}\n         */\n    norm(type = 'frobenius') {\n      var result = 0;\n      if (type === 'max') {\n        return this.max();\n      } else if (type === 'frobenius') {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j < this.columns; j++) {\n            result = result + this.get(i, j) * this.get(i, j);\n          }\n        }\n        return Math.sqrt(result);\n      } else {\n        throw new RangeError(`unknown norm type: ${type}`);\n      }\n    }\n\n    /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n    cumulativeSum() {\n      var sum = 0;\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          sum += this.get(i, j);\n          this.set(i, j, sum);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n    dot(vector2) {\n      if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n      var vector1 = this.to1DArray();\n      if (vector1.length !== vector2.length) {\n        throw new RangeError('vectors do not have the same size');\n      }\n      var dot = 0;\n      for (var i = 0; i < vector1.length; i++) {\n        dot += vector1[i] * vector2[i];\n      }\n      return dot;\n    }\n\n    /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n    mmul(other) {\n      other = this.constructor.checkMatrix(other);\n      if (this.columns !== other.rows) {\n        // eslint-disable-next-line no-console\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n      }\n\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.columns;\n\n      var result = new this.constructor[Symbol.species](m, p);\n\n      var Bcolj = new Array(n);\n      for (var j = 0; j < p; j++) {\n        for (var k = 0; k < n; k++) {\n          Bcolj[k] = other.get(k, j);\n        }\n\n        for (var i = 0; i < m; i++) {\n          var s = 0;\n          for (k = 0; k < n; k++) {\n            s += this.get(i, k) * Bcolj[k];\n          }\n\n          result.set(i, j, s);\n        }\n      }\n      return result;\n    }\n\n    strassen2x2(other) {\n      var result = new this.constructor[Symbol.species](2, 2);\n      const a11 = this.get(0, 0);\n      const b11 = other.get(0, 0);\n      const a12 = this.get(0, 1);\n      const b12 = other.get(0, 1);\n      const a21 = this.get(1, 0);\n      const b21 = other.get(1, 0);\n      const a22 = this.get(1, 1);\n      const b22 = other.get(1, 1);\n\n      // Compute intermediate values.\n      const m1 = (a11 + a22) * (b11 + b22);\n      const m2 = (a21 + a22) * b11;\n      const m3 = a11 * (b12 - b22);\n      const m4 = a22 * (b21 - b11);\n      const m5 = (a11 + a12) * b22;\n      const m6 = (a21 - a11) * (b11 + b12);\n      const m7 = (a12 - a22) * (b21 + b22);\n\n      // Combine intermediate values into the output.\n      const c00 = m1 + m4 - m5 + m7;\n      const c01 = m3 + m5;\n      const c10 = m2 + m4;\n      const c11 = m1 - m2 + m3 + m6;\n\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      return result;\n    }\n\n    strassen3x3(other) {\n      var result = new this.constructor[Symbol.species](3, 3);\n\n      const a00 = this.get(0, 0);\n      const a01 = this.get(0, 1);\n      const a02 = this.get(0, 2);\n      const a10 = this.get(1, 0);\n      const a11 = this.get(1, 1);\n      const a12 = this.get(1, 2);\n      const a20 = this.get(2, 0);\n      const a21 = this.get(2, 1);\n      const a22 = this.get(2, 2);\n\n      const b00 = other.get(0, 0);\n      const b01 = other.get(0, 1);\n      const b02 = other.get(0, 2);\n      const b10 = other.get(1, 0);\n      const b11 = other.get(1, 1);\n      const b12 = other.get(1, 2);\n      const b20 = other.get(2, 0);\n      const b21 = other.get(2, 1);\n      const b22 = other.get(2, 2);\n\n      const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n      const m2 = (a00 - a10) * (-b01 + b11);\n      const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n      const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n      const m5 = (a10 + a11) * (-b00 + b01);\n      const m6 = a00 * b00;\n      const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n      const m8 = (-a00 + a20) * (b02 - b12);\n      const m9 = (a20 + a21) * (-b00 + b02);\n      const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n      const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n      const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n      const m13 = (a02 - a22) * (b11 - b21);\n      const m14 = a02 * b20;\n      const m15 = (a21 + a22) * (-b20 + b21);\n      const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n      const m17 = (a02 - a12) * (b12 - b22);\n      const m18 = (a11 + a12) * (-b20 + b22);\n      const m19 = a01 * b10;\n      const m20 = a12 * b21;\n      const m21 = a10 * b02;\n      const m22 = a20 * b01;\n      const m23 = a22 * b22;\n\n      const c00 = m6 + m14 + m19;\n      const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n      const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n      const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n      const c11 = m2 + m4 + m5 + m6 + m20;\n      const c12 = m14 + m16 + m17 + m18 + m21;\n      const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n      const c21 = m12 + m13 + m14 + m15 + m22;\n      const c22 = m6 + m7 + m8 + m9 + m23;\n\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(0, 2, c02);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      result.set(1, 2, c12);\n      result.set(2, 0, c20);\n      result.set(2, 1, c21);\n      result.set(2, 2, c22);\n      return result;\n    }\n\n    /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n    mmulStrassen(y) {\n      var x = this.clone();\n      var r1 = x.rows;\n      var c1 = x.columns;\n      var r2 = y.rows;\n      var c2 = y.columns;\n      if (c1 !== r2) {\n        // eslint-disable-next-line no-console\n        console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n      }\n\n      // Put a matrix into the top left of a matrix of zeros.\n      // `rows` and `cols` are the dimensions of the output matrix.\n      function embed(mat, rows, cols) {\n        var r = mat.rows;\n        var c = mat.columns;\n        if ((r === rows) && (c === cols)) {\n          return mat;\n        } else {\n          var resultat = Matrix.zeros(rows, cols);\n          resultat = resultat.setSubMatrix(mat, 0, 0);\n          return resultat;\n        }\n      }\n\n\n      // Make sure both matrices are the same size.\n      // This is exclusively for simplicity:\n      // this algorithm can be implemented with matrices of different sizes.\n\n      var r = Math.max(r1, r2);\n      var c = Math.max(c1, c2);\n      x = embed(x, r, c);\n      y = embed(y, r, c);\n\n      // Our recursive multiplication function.\n      function blockMult(a, b, rows, cols) {\n        // For small matrices, resort to naive multiplication.\n        if (rows <= 512 || cols <= 512) {\n          return a.mmul(b); // a is equivalent to this\n        }\n\n        // Apply dynamic padding.\n        if ((rows % 2 === 1) && (cols % 2 === 1)) {\n          a = embed(a, rows + 1, cols + 1);\n          b = embed(b, rows + 1, cols + 1);\n        } else if (rows % 2 === 1) {\n          a = embed(a, rows + 1, cols);\n          b = embed(b, rows + 1, cols);\n        } else if (cols % 2 === 1) {\n          a = embed(a, rows, cols + 1);\n          b = embed(b, rows, cols + 1);\n        }\n\n        var halfRows = parseInt(a.rows / 2, 10);\n        var halfCols = parseInt(a.columns / 2, 10);\n        // Subdivide input matrices.\n        var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n        var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n        var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n        var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n        var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n        var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n        var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n        var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n        // Compute intermediate values.\n        var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n        var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n        var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n        var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n        var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n        var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n        var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n        // Combine intermediate values into the output.\n        var c11 = Matrix.add(m1, m4);\n        c11.sub(m5);\n        c11.add(m7);\n        var c12 = Matrix.add(m3, m5);\n        var c21 = Matrix.add(m2, m4);\n        var c22 = Matrix.sub(m1, m2);\n        c22.add(m3);\n        c22.add(m6);\n\n        // Crop output to the desired size (undo dynamic padding).\n        var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n        resultat = resultat.setSubMatrix(c11, 0, 0);\n        resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n        resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n        resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n        return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n      }\n      return blockMult(x, y, r, c);\n    }\n\n    /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n    scaleRows(min, max) {\n      min = min === undefined ? 0 : min;\n      max = max === undefined ? 1 : max;\n      if (min >= max) {\n        throw new RangeError('min should be strictly smaller than max');\n      }\n      var newMatrix = this.constructor.empty(this.rows, this.columns);\n      for (var i = 0; i < this.rows; i++) {\n        var scaled = rescale(this.getRow(i), { min, max });\n        newMatrix.setRow(i, scaled);\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n    scaleColumns(min, max) {\n      min = min === undefined ? 0 : min;\n      max = max === undefined ? 1 : max;\n      if (min >= max) {\n        throw new RangeError('min should be strictly smaller than max');\n      }\n      var newMatrix = this.constructor.empty(this.rows, this.columns);\n      for (var i = 0; i < this.columns; i++) {\n        var scaled = rescale(this.getColumn(i), {\n          min: min,\n          max: max\n        });\n        newMatrix.setColumn(i, scaled);\n      }\n      return newMatrix;\n    }\n\n\n    /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n    kroneckerProduct(other) {\n      other = this.constructor.checkMatrix(other);\n\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.rows;\n      var q = other.columns;\n\n      var result = new this.constructor[Symbol.species](m * p, n * q);\n      for (var i = 0; i < m; i++) {\n        for (var j = 0; j < n; j++) {\n          for (var k = 0; k < p; k++) {\n            for (var l = 0; l < q; l++) {\n              result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n            }\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n    transpose() {\n      var result = new this.constructor[Symbol.species](this.columns, this.rows);\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          result.set(j, i, this.get(i, j));\n        }\n      }\n      return result;\n    }\n\n    /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n    sortRows(compareFunction) {\n      if (compareFunction === undefined) compareFunction = compareNumbers;\n      for (var i = 0; i < this.rows; i++) {\n        this.setRow(i, this.getRow(i).sort(compareFunction));\n      }\n      return this;\n    }\n\n    /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n    sortColumns(compareFunction) {\n      if (compareFunction === undefined) compareFunction = compareNumbers;\n      for (var i = 0; i < this.columns; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n      }\n      return this;\n    }\n\n    /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n    subMatrix(startRow, endRow, startColumn, endColumn) {\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n      for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n    subMatrixRow(indices, startColumn, endColumn) {\n      if (startColumn === undefined) startColumn = 0;\n      if (endColumn === undefined) endColumn = this.columns - 1;\n      if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n        throw new RangeError('Argument out of range');\n      }\n\n      var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          if (indices[i] < 0 || indices[i] >= this.rows) {\n            throw new RangeError(`Row index out of range: ${indices[i]}`);\n          }\n          newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n    subMatrixColumn(indices, startRow, endRow) {\n      if (startRow === undefined) startRow = 0;\n      if (endRow === undefined) endRow = this.rows - 1;\n      if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n        throw new RangeError('Argument out of range');\n      }\n\n      var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n          if (indices[i] < 0 || indices[i] >= this.columns) {\n            throw new RangeError(`Column index out of range: ${indices[i]}`);\n          }\n          newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n    setSubMatrix(matrix, startRow, startColumn) {\n      matrix = this.constructor.checkMatrix(matrix);\n      var endRow = startRow + matrix.rows - 1;\n      var endColumn = startColumn + matrix.columns - 1;\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n          this[startRow + i][startColumn + j] = matrix.get(i, j);\n        }\n      }\n      return this;\n    }\n\n    /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n    selection(rowIndices, columnIndices) {\n      var indices = checkIndices(this, rowIndices, columnIndices);\n      var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n      for (var i = 0; i < indices.row.length; i++) {\n        var rowIndex = indices.row[i];\n        for (var j = 0; j < indices.column.length; j++) {\n          var columnIndex = indices.column[j];\n          newMatrix[i][j] = this.get(rowIndex, columnIndex);\n        }\n      }\n      return newMatrix;\n    }\n\n    /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n    trace() {\n      var min = Math.min(this.rows, this.columns);\n      var trace = 0;\n      for (var i = 0; i < min; i++) {\n        trace += this.get(i, i);\n      }\n      return trace;\n    }\n\n    /*\n         Matrix views\n         */\n\n    /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n    transposeView() {\n      return new MatrixTransposeView(this);\n    }\n\n    /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n    rowView(row) {\n      checkRowIndex(this, row);\n      return new MatrixRowView(this, row);\n    }\n\n    /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n    columnView(column) {\n      checkColumnIndex(this, column);\n      return new MatrixColumnView(this, column);\n    }\n\n    /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n    flipRowView() {\n      return new MatrixFlipRowView(this);\n    }\n\n    /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n    flipColumnView() {\n      return new MatrixFlipColumnView(this);\n    }\n\n    /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n    subMatrixView(startRow, endRow, startColumn, endColumn) {\n      return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n    }\n\n    /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n    selectionView(rowIndices, columnIndices) {\n      return new MatrixSelectionView(this, rowIndices, columnIndices);\n    }\n\n    /**\n         * Returns a view of the row indices\n         * @example\n         * // resulting vector is [[1,2,3], [1,2,3]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])\n         * @param {Array<number>} rowIndices\n         * @return {MatrixRowSelectionView}\n         */\n    rowSelectionView(rowIndices) {\n      return new MatrixRowSelectionView(this, rowIndices);\n    }\n\n    /**\n         * Returns a view of the column indices\n         * @example\n         * // resulting vector is [[2, 2], [5, 5]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])\n         * @param {Array<number>} columnIndices\n         * @return {MatrixColumnSelectionView}\n         */\n    columnSelectionView(columnIndices) {\n      return new MatrixColumnSelectionView(this, columnIndices);\n    }\n\n\n    /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n    det() {\n      if (this.isSquare()) {\n        var a, b, c, d;\n        if (this.columns === 2) {\n          // 2 x 2 matrix\n          a = this.get(0, 0);\n          b = this.get(0, 1);\n          c = this.get(1, 0);\n          d = this.get(1, 1);\n\n          return a * d - (b * c);\n        } else if (this.columns === 3) {\n          // 3 x 3 matrix\n          var subMatrix0, subMatrix1, subMatrix2;\n          subMatrix0 = this.selectionView([1, 2], [1, 2]);\n          subMatrix1 = this.selectionView([1, 2], [0, 2]);\n          subMatrix2 = this.selectionView([1, 2], [0, 1]);\n          a = this.get(0, 0);\n          b = this.get(0, 1);\n          c = this.get(0, 2);\n\n          return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n        } else {\n          // general purpose determinant using the LU decomposition\n          return new LuDecomposition(this).determinant;\n        }\n      } else {\n        throw Error('Determinant can only be calculated for a square matrix.');\n      }\n    }\n\n    /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n    pseudoInverse(threshold) {\n      if (threshold === undefined) threshold = Number.EPSILON;\n      var svdSolution = new SvDecomposition(this, { autoTranspose: true });\n\n      var U = svdSolution.leftSingularVectors;\n      var V = svdSolution.rightSingularVectors;\n      var s = svdSolution.diagonal;\n\n      for (var i = 0; i < s.length; i++) {\n        if (Math.abs(s[i]) > threshold) {\n          s[i] = 1.0 / s[i];\n        } else {\n          s[i] = 0.0;\n        }\n      }\n\n      // convert list to diagonal\n      s = this.constructor[Symbol.species].diag(s);\n      return V.mmul(s.mmul(U.transposeView()));\n    }\n\n    /**\n         * Creates an exact and independent copy of the matrix\n         * @return {Matrix}\n         */\n    clone() {\n      var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n      for (var row = 0; row < this.rows; row++) {\n        for (var column = 0; column < this.columns; column++) {\n          newMatrix.set(row, column, this.get(row, column));\n        }\n      }\n      return newMatrix;\n    }\n  }\n\n  Matrix.prototype.klass = 'Matrix';\n\n  function compareNumbers(a, b) {\n    return a - b;\n  }\n\n  /*\n     Synonyms\n     */\n\n  Matrix.random = Matrix.rand;\n  Matrix.diagonal = Matrix.diag;\n  Matrix.prototype.diagonal = Matrix.prototype.diag;\n  Matrix.identity = Matrix.eye;\n  Matrix.prototype.negate = Matrix.prototype.neg;\n  Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n  Matrix.prototype.determinant = Matrix.prototype.det;\n\n  /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n  var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n  var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n  var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n  var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n  var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n  var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n  var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n  var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n  var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n  var staticMethodWithOneArg = staticMethodWithArgs;\n\n  var operators = [\n    // Arithmetic operators\n    ['+', 'add'],\n    ['-', 'sub', 'subtract'],\n    ['*', 'mul', 'multiply'],\n    ['/', 'div', 'divide'],\n    ['%', 'mod', 'modulus'],\n    // Bitwise operators\n    ['&', 'and'],\n    ['|', 'or'],\n    ['^', 'xor'],\n    ['<<', 'leftShift'],\n    ['>>', 'signPropagatingRightShift'],\n    ['>>>', 'rightShift', 'zeroFillRightShift']\n  ];\n\n  var i;\n  var eval2 = eval; // eslint-disable-line no-eval\n  for (var operator of operators) {\n    var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, { name: operator[1], op: operator[0] }));\n    var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, { name: `${operator[1]}S`, op: operator[0] }));\n    var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, { name: `${operator[1]}M`, op: operator[0] }));\n    var staticOp = eval2(fillTemplateFunction(staticOperator, { name: operator[1] }));\n    for (i = 1; i < operator.length; i++) {\n      Matrix.prototype[operator[i]] = inplaceOp;\n      Matrix.prototype[`${operator[i]}S`] = inplaceOpS;\n      Matrix.prototype[`${operator[i]}M`] = inplaceOpM;\n      Matrix[operator[i]] = staticOp;\n    }\n  }\n\n  var methods = [['~', 'not']];\n\n  [\n    'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n    'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n    'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n  ].forEach(function (mathMethod) {\n    methods.push([`Math.${mathMethod}`, mathMethod]);\n  });\n\n  for (var method of methods) {\n    var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, { name: method[1], method: method[0] }));\n    var staticMeth = eval2(fillTemplateFunction(staticMethod, { name: method[1] }));\n    for (i = 1; i < method.length; i++) {\n      Matrix.prototype[method[i]] = inplaceMeth;\n      Matrix[method[i]] = staticMeth;\n    }\n  }\n\n  var methodsWithArgs = [['Math.pow', 1, 'pow']];\n\n  for (var methodWithArg of methodsWithArgs) {\n    var args = 'arg0';\n    for (i = 1; i < methodWithArg[1]; i++) {\n      args += `, arg${i}`;\n    }\n    if (methodWithArg[1] !== 1) {\n      var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {\n        name: methodWithArg[2],\n        method: methodWithArg[0],\n        args: args\n      }));\n      var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, { name: methodWithArg[2], args: args }));\n      for (i = 2; i < methodWithArg.length; i++) {\n        Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n        Matrix[methodWithArg[i]] = staticMethWithArgs;\n      }\n    } else {\n      var tmplVar = {\n        name: methodWithArg[2],\n        args: args,\n        method: methodWithArg[0]\n      };\n      var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n      var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n      var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n      var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n      for (i = 2; i < methodWithArg.length; i++) {\n        Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n        Matrix.prototype[`${methodWithArg[i]}M`] = inplaceMethodM;\n        Matrix.prototype[`${methodWithArg[i]}S`] = inplaceMethodS;\n        Matrix[methodWithArg[i]] = staticMethod2;\n      }\n    }\n  }\n\n  function fillTemplateFunction(template, values) {\n    for (var value in values) {\n      template = template.replace(new RegExp(`%${value}%`, 'g'), values[value]);\n    }\n    return template;\n  }\n\n  return Matrix;\n}\n","import AbstractMatrix from './abstractMatrix';\nimport {\n  checkColumnIndex,\n  checkColumnVector,\n  checkRowIndex,\n  checkRowVector\n} from './util';\n\nexport default class Matrix extends AbstractMatrix(Array) {\n  constructor(nRows, nColumns) {\n    var i;\n    if (arguments.length === 1 && typeof nRows === 'number') {\n      return new Array(nRows);\n    }\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      super(nRows);\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (i = 0; i < nRows; i++) {\n          this[i] = new Array(nColumns);\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const matrix = nRows;\n      nRows = matrix.length;\n      nColumns = matrix[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element'\n        );\n      }\n      super(nRows);\n      for (i = 0; i < nRows; i++) {\n        if (matrix[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this[i] = [].concat(matrix[i]);\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array'\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n  }\n\n  /**\n   * Removes a row from the given index\n   * @param {number} index - Row index\n   * @return {Matrix} this\n   */\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  /**\n   * Adds a row at the given index\n   * @param {number} [index = this.rows] - Row index\n   * @param {Array|Matrix} array - Array or vector\n   * @return {Matrix} this\n   */\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = checkRowVector(this, array, true);\n    this.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  /**\n   * Removes a column from the given index\n   * @param {number} index - Column index\n   * @return {Matrix} this\n   */\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (var i = 0; i < this.rows; i++) {\n      this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  /**\n   * Adds a column at the given index\n   * @param {number} [index = this.columns] - Column index\n   * @param {Array|Matrix} array - Array or vector\n   * @return {Matrix} this\n   */\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (var i = 0; i < this.rows; i++) {\n      this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix() {\n  /**\n   * @class WrapperMatrix2D\n   * @param {Array<Array<number>>} data\n   */\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  static get [Symbol.species]() {\n    return Matrix;\n  }\n}\n","import { Matrix, WrapperMatrix2D } from '../index';\n\nimport { hypotenuse, getFilled2DArray } from './util';\n\n/**\n * @class EigenvalueDecomposition\n * @link https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n * @param {Matrix} matrix\n * @param {object} [options]\n * @param {boolean} [options.assumeSymmetric=false]\n */\nexport default class EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns;\n    var V = getFilled2DArray(n, n, 0);\n    var d = new Array(n);\n    var e = new Array(n);\n    var value = matrix;\n    var i, j;\n\n    var isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V[i][j] = value.get(i, j);\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      var H = getFilled2DArray(n, n, 0);\n      var ort = new Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H[i][j] = value.get(i, j);\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get realEigenvalues() {\n    return this.d;\n  }\n\n  /**\n   *\n   * @return {Array<number>}\n   */\n  get imaginaryEigenvalues() {\n    return this.e;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get eigenvectorMatrix() {\n    if (!Matrix.isMatrix(this.V)) {\n      this.V = new Matrix(this.V);\n    }\n    return this.V;\n  }\n\n  /**\n   *\n   * @return {Matrix}\n   */\n  get diagonalMatrix() {\n    var n = this.n;\n    var e = this.e;\n    var d = this.d;\n    var X = new Matrix(n, n);\n    var i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X[i][j] = 0;\n      }\n      X[i][i] = d[i];\n      if (e[i] > 0) {\n        X[i][i + 1] = e[i];\n      } else if (e[i] < 0) {\n        X[i][i - 1] = e[i];\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  var f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V[n - 1][j];\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V[i - 1][j];\n        V[i][j] = 0;\n        V[j][i] = 0;\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V[j][i] = f;\n        g = e[j] + V[j][j] * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V[k][j] * d[k];\n          e[k] += V[k][j] * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V[k][j] -= f * e[k] + g * d[k];\n        }\n        d[j] = V[i - 1][j];\n        V[i][j] = 0;\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V[n - 1][i] = V[i][i];\n    V[i][i] = 1;\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V[k][i + 1] / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V[k][i + 1] * V[k][j];\n        }\n        for (k = 0; k <= i; k++) {\n          V[k][j] -= g * d[k];\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V[k][i + 1] = 0;\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V[n - 1][j];\n    V[n - 1][j] = 0;\n  }\n\n  V[n - 1][n - 1] = 1;\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  var g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  var f = 0;\n  var tst1 = 0;\n  var eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      iter = 0;\n      do {\n        iter = iter + 1;\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V[k][i + 1];\n            V[k][i + 1] = s * V[k][i] + c * h;\n            V[k][i] = c * V[k][i] - s * h;\n          }\n        }\n\n        p = -s * s2 * c3 * el1 * e[l] / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V[j][i];\n        V[j][i] = V[j][k];\n        V[j][k] = p;\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  var low = 0;\n  var high = n - 1;\n  var f, g, h, i, j, m;\n  var scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H[i][m - 1]);\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H[i][m - 1] / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H[i][j];\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H[i][j] -= f * ort[i];\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H[i][j];\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H[i][j] -= f * ort[j];\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H[m][m - 1] = scale * g;\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V[i][j] = i === j ? 1 : 0;\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H[m][m - 1] !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H[i][m - 1];\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V[i][j];\n        }\n\n        g = g / ort[m] / H[m][m - 1];\n        for (i = m; i <= high; i++) {\n          V[i][j] += g * ort[i];\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  var n = nn - 1;\n  var low = 0;\n  var high = nn - 1;\n  var eps = Number.EPSILON;\n  var exshift = 0;\n  var norm = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var z = 0;\n  var iter = 0;\n  var i, j, k, l, m, t, w, x, y;\n  var ra, sa, vr, vi;\n  var notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H[i][i];\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H[i][j]);\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H[l][l - 1]) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H[n][n] = H[n][n] + exshift;\n      d[n] = H[n][n];\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H[n][n - 1] * H[n - 1][n];\n      p = (H[n - 1][n - 1] - H[n][n]) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H[n][n] = H[n][n] + exshift;\n      H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n      x = H[n][n];\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H[n][n - 1];\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H[n - 1][j];\n          H[n - 1][j] = q * z + p * H[n][j];\n          H[n][j] = q * H[n][j] - p * z;\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H[i][n - 1];\n          H[i][n - 1] = q * z + p * H[i][n];\n          H[i][n] = q * H[i][n] - p * z;\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V[i][n - 1];\n          V[i][n - 1] = q * z + p * V[i][n];\n          V[i][n] = q * V[i][n] - p * z;\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H[n][n];\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H[n - 1][n - 1];\n        w = H[n][n - 1] * H[n - 1][n];\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H[i][i] -= x;\n        }\n        s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H[i][i] -= s;\n          }\n          exshift += s;\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H[m][m];\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n        q = H[m + 1][m + 1] - z - r - s;\n        r = H[m + 2][m + 1];\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H[m - 1][m - 1]) +\n                Math.abs(z) +\n                Math.abs(H[m + 1][m + 1])))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H[i][i - 2] = 0;\n        if (i > m + 2) {\n          H[i][i - 3] = 0;\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H[k][k - 1];\n          q = H[k + 1][k - 1];\n          r = notlast ? H[k + 2][k - 1] : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H[k][k - 1] = -s * x;\n          } else if (l !== m) {\n            H[k][k - 1] = -H[k][k - 1];\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H[k][j] + q * H[k + 1][j];\n            if (notlast) {\n              p = p + r * H[k + 2][j];\n              H[k + 2][j] = H[k + 2][j] - p * z;\n            }\n\n            H[k][j] = H[k][j] - p * x;\n            H[k + 1][j] = H[k + 1][j] - p * y;\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H[i][k] + y * H[i][k + 1];\n            if (notlast) {\n              p = p + z * H[i][k + 2];\n              H[i][k + 2] = H[i][k + 2] - p * r;\n            }\n\n            H[i][k] = H[i][k] - p;\n            H[i][k + 1] = H[i][k + 1] - p * q;\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V[i][k] + y * V[i][k + 1];\n            if (notlast) {\n              p = p + z * V[i][k + 2];\n              V[i][k + 2] = V[i][k + 2] - p * r;\n            }\n\n            V[i][k] = V[i][k] - p;\n            V[i][k + 1] = V[i][k + 1] - p * q;\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H[n][n] = 1;\n      for (i = n - 1; i >= 0; i--) {\n        w = H[i][i] - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H[i][j] * H[j][n];\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H[i][n] = w !== 0 ? -r / w : -r / (eps * norm);\n          } else {\n            x = H[i][i + 1];\n            y = H[i + 1][i];\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H[i][n] = t;\n            H[i + 1][n] =\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z;\n          }\n\n          t = Math.abs(H[i][n]);\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H[j][n] = H[j][n] / t;\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n        H[n - 1][n - 1] = q / H[n][n - 1];\n        H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n      } else {\n        cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n        H[n - 1][n - 1] = cdivres[0];\n        H[n - 1][n] = cdivres[1];\n      }\n\n      H[n][n - 1] = 0;\n      H[n][n] = 1;\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H[i][j] * H[j][n - 1];\n          sa = sa + H[i][j] * H[j][n];\n        }\n\n        w = H[i][i] - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H[i][n - 1] = cdivres[0];\n            H[i][n] = cdivres[1];\n          } else {\n            x = H[i][i + 1];\n            y = H[i + 1][i];\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi\n            );\n            H[i][n - 1] = cdivres[0];\n            H[i][n] = cdivres[1];\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n              H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n            } else {\n              cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n              H[i + 1][n - 1] = cdivres[0];\n              H[i + 1][n] = cdivres[1];\n            }\n          }\n\n          t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H[j][n - 1] = H[j][n - 1] / t;\n              H[j][n] = H[j][n] / t;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V[i][j] = H[i][j];\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V[i][k] * H[k][j];\n      }\n      V[i][j] = z;\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  var r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n","/**\n *  Copyright (c) 2017, Helikar Lab.\n *  All rights reserved.\n *\n *  This source code is licensed under the GPLv3 License.\n *  Author: Renato Fabbri\n */\n\nimport {EigenvalueDecomposition} from 'ml-matrix';\nimport {create2dArray} from './utils';\n\nfunction twoSmallest (arr) {\n    const min = Math.min.apply(null, arr), // get the max of the array\n        mini = arr.indexOf(min);\n    arr[mini] = Infinity; // replace max in the array with -infinity\n    const second_min = Math.min.apply(null, arr), // get the new max \n        second_mini = arr.indexOf(second_min);\n    arr[second_mini] = Infinity; // replace max in the array with -infinity\n    const third_min = Math.min.apply(null, arr), // get the new max \n        third_mini = arr.indexOf(third_min);\n    return [second_mini, third_mini];\n}\n\nfunction normalize (x, y) {\n    let maxx = Math.max.apply(null, x.map(Math.abs)),\n        maxy = Math.max.apply(null, y.map(Math.abs));\n    let minx = Math.min.apply(null, x),\n        miny = Math.min.apply(null, y);\n    for(let i=0; i<x.length; ++i){\n        x[i] = 0.1+(x[i]-minx)/((maxx-minx)*1.25);\n        y[i] = 0.1+(y[i]-miny)/((maxy-miny)*1.25);\n    }\n    return [x, y];\n}\n\nclass Spectral {\n  // get degree of all nodes\n  // let user define at least: starting angle and radius and\n  // clock/cclock direction\n  // size of vertices\n  // more: a ratio of compactness for the more/less connected nodes\n  // a spiral ratio with a rotation ratio for having more than 2pi\n  // distribution of nodes when spiriling\n  // use some other ordering criterion than degree? Strength?\n  // defined by user and found as attribute of each node?\n  // random ordering, minimal crossing of edges?\n  constructor(nodes, edges) {\n    this._nodes = nodes;\n    this._edges = edges;\n  }\n\n  apply () {\n      let A = create2dArray(this._nodes.length, this._nodes.length);\n      // build the adjacency matrix\n      for (let i=0; i<this._edges.length; ++i){\n          let ii = this._edges[i].source.index;\n          let j = this._edges[i].target.index;\n          A[ii][j] = -1; // not considering edge weight for now (the example json files don't have weight)\n          A[j][ii] = -1; // not considering edge weight for now (the example json files don't have weight)\n      }\n      // build the diagonal of degrees\n      // NOT subtract adjacency from degrees but:\n      // substitute diagonal by degrees\n      for (let i=0; i<this._nodes.length; ++i){\n          A[i][i] = -A[i].reduce((a, b) => a+b, 0);\n      }\n      let foo = new EigenvalueDecomposition(A);\n      const iii = twoSmallest(foo.realEigenvalues);\n      const foo_ = foo.eigenvectorMatrix.transpose();\n      const x = foo_[iii[0]];\n      const y = foo_[iii[1]];\n      const xy = normalize(x, y);\n      // var fooo = new Matrix.EigenvalueDecomposition(A);\n      // var fooo = new Matrix.EigenvalueDecomposition(A);\n      // recipe from http://www.sfu.ca/personal/archives/richards/Pages/NAS.AJS-WDR.pdf\n      // and implemented in networkx/drawing/layout.py\n      this._nodes.forEach(function(node, i){\n          node.x = xy[0][i];\n          node.y = xy[1][i];\n      }); \n  }\n};\n\n\nself.addEventListener('message', function (e) {\n    var nodes = e.data.nodes;\n    var edges = e.data.edges;\n    var layout_options = e.data.layout_options;\n    new Spectral(nodes, edges, layout_options).apply();\n    self.postMessage({ nodes, edges });\n}, false);"],"sourceRoot":""}